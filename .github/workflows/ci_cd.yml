name: Build, test, and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: MoviesMadeEasy
  AZURE_WEBAPP_PACKAGE_PATH: './publish_output'
  DOTNET_VERSION: '8.0.x'

on:
  push:
    branches: [ "dash_movie_modal" ] 
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj

      - name: Install npm packages
        run: npm install

      - name: Build with dotnet
        run: dotnet build MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj --configuration Release

      - name: Run backend unit tests (NUnit)
        run: dotnet test MoviesMadeEasyProject/Tests_Unit/Tests_Unit.csproj --verbosity normal

      - name: Install Chrome & ChromeDriver
        run: |
          # Install Chrome
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          
          # Install jq for JSON parsing
          sudo apt-get install -y jq
          
          # Download latest ChromeDriver for current Chrome version
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3)
          echo "Chrome version: $CHROME_VERSION"
          
          # Get matching ChromeDriver URL using Chrome for Testing API
          CHROMEDRIVER_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json | \
            jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')
          
          # Download and install ChromeDriver
          wget -O chromedriver.zip "$CHROMEDRIVER_URL"
          unzip chromedriver.zip
          
          # Correct path based on actual extraction
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
      
      - name: Publish app with in-memory database
        run: |
          # Create a temporary Program.cs that uses in-memory database
          cp MoviesMadeEasyProject/MoviesMadeEasy/Program.cs MoviesMadeEasyProject/MoviesMadeEasy/Program.cs.bak
          cat > MoviesMadeEasyProject/MoviesMadeEasy/Program.cs << 'EOL'
          using MoviesMadeEasy.DAL.Abstract;
          using MoviesMadeEasy.DAL.Concrete;
          using Microsoft.EntityFrameworkCore;
          using MoviesMadeEasy.Models;
          using MoviesMadeEasy.Data;
          using Microsoft.AspNetCore.Identity;
          using Microsoft.AspNetCore.Authentication;
          using Microsoft.Extensions.Logging;
          using Microsoft.Extensions.DependencyInjection;
          using Polly;
          using Polly.Extensions.Http;
          using Microsoft.AspNetCore.Session;

          var builder = WebApplication.CreateBuilder(args);

          builder.Logging.ClearProviders();
          builder.Logging.AddConsole();
          builder.Logging.AddDebug();
          builder.Logging.SetMinimumLevel(LogLevel.Information);

          if (builder.Environment.IsDevelopment())
          {
              builder.Configuration.AddUserSecrets<Program>();
          }

          if (builder.Environment.IsDevelopment())
          {
              builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();
              builder.Services.AddRazorPages().AddRazorRuntimeCompilation();
          }
          else
          {
              builder.Services.AddControllersWithViews();
          }

          builder.Services.AddHttpClient<IOpenAIService, OpenAIService>()
              .AddPolicyHandler(Policy<HttpResponseMessage>
                  .Handle<HttpRequestException>()
                  .OrResult(x => (int)x.StatusCode == 429)
                  .WaitAndRetryAsync(3, retryAttempt =>
                      TimeSpan.FromSeconds(Math.Pow(2, retryAttempt))));
                      
          builder.Services.AddHttpClient<IMovieService, MovieService>();
          builder.Services.AddScoped<IMovieService, MovieService>(provider =>
          {
              var httpClient = provider.GetRequiredService<HttpClient>();
              var configuration = provider.GetRequiredService<IConfiguration>();
              return new MovieService(httpClient, configuration);
          });

          builder.Services.AddScoped<ISubscriptionRepository, SubscriptionRepository>();
          builder.Services.AddScoped<IUserRepository, UserRepository>();
          builder.Services.AddScoped<IOpenAIService, OpenAIService>();
          builder.Services.AddScoped<ITitleRepository, TitleRepository>();

          var azurePublish = !builder.Environment.IsDevelopment();

          // Use in-memory database for CI/CD
          Console.WriteLine("Using in-memory database for CI/CD");
          builder.Services.AddDbContext<UserDbContext>(options =>
              options.UseInMemoryDatabase("TestDb"));

          builder.Services.AddDbContext<IdentityDbContext>(options =>
              options.UseInMemoryDatabase("TestAuthDb"));

          builder.Services.AddScoped<DbContext>(sp => sp.GetRequiredService<UserDbContext>());

          builder.Services.AddDefaultIdentity<IdentityUser>(options =>
          {
              options.SignIn.RequireConfirmedAccount = false;
              options.User.RequireUniqueEmail = true;
          })
          .AddEntityFrameworkStores<IdentityDbContext>();

          builder.Services.AddRazorPages();

          builder.Services.AddDistributedMemoryCache();
          builder.Services.AddSession(options =>
          {
              options.IdleTimeout = TimeSpan.FromMinutes(30);
              options.Cookie.HttpOnly = true;
              options.Cookie.IsEssential = true;
          });

          var app = builder.Build();

          if (!app.Environment.IsDevelopment())
          {
              app.UseExceptionHandler("/Home/Error");
              app.UseHsts();
          }

          using (var scope = app.Services.CreateScope())
          {
              var services = scope.ServiceProvider;
              try
              {
                  SeedData.InitializeAsync(services).Wait();
              }
              catch (Exception ex)
              {
                  var logger = services.GetRequiredService<ILogger<Program>>();
                  logger.LogError(ex, "An error occurred seeding the DB.");
              }
          }

          app.UseHttpsRedirection();
          app.UseStaticFiles();
          app.UseRouting();
          app.UseSession();
          app.UseAuthentication();
          app.UseAuthorization();

          app.MapControllerRoute(
              name: "default",
              pattern: "{controller=Home}/{action=Index}/{id?}");

          app.MapRazorPages();

          app.Run();
          EOL
          
          # Publish with the temporary CI/CD Program.cs
          dotnet publish MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj --configuration Release --output ./publish_output
          
          # Restore original Program.cs (this won't affect the published version)
          mv MoviesMadeEasyProject/MoviesMadeEasy/Program.cs.bak MoviesMadeEasyProject/MoviesMadeEasy/Program.cs

      - name: Run web app in background for tests
        run: |
          cd ./publish_output
          nohup dotnet MoviesMadeEasy.dll --urls http://localhost:5000 > app.log 2>&1 &
          
          # Wait for app to fully initialize and verify it's running
          attempts=0
          max_attempts=30
          
          echo "Waiting for application to start..."
          while [ $attempts -lt $max_attempts ]; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Application started successfully!"
              break
            fi
            attempts=$((attempts+1))
            echo "Attempt $attempts of $max_attempts - waiting 2 seconds..."
            sleep 2
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Application failed to start after $max_attempts attempts"
            echo "Application log:"
            cat app.log
            exit 1
          fi

      - name: Run BDD tests (NUnit + Selenium)
        run: dotnet test MoviesMadeEasyProject/MyBddProject.Tests/MyBddProject.Tests.csproj --verbosity normal

      - name: Run frontend tests (Jest)
        run: npm run test

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./publish_output

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./publish_output

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}