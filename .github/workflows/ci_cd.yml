name: Build, test, and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: MoviesMadeEasy
  AZURE_WEBAPP_PACKAGE_PATH: './publish_output'
  DOTNET_VERSION: '8.0.x'

on:
  push:
    branches: [ "dash_movie_modal" ] 
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj

      - name: Install npm packages
        run: npm install

      - name: Build with dotnet
        run: dotnet build MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj --configuration Release

      - name: Run backend unit tests (NUnit)
        run: dotnet test MoviesMadeEasyProject/Tests_Unit/Tests_Unit.csproj --verbosity normal

      - name: Install Chrome & ChromeDriver
        run: |
          # Add Google Chrome repository
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update

          # Install specific version of Chrome - 114.0.5735.90 is known to work well with ChromeDriver
          sudo apt-get install -y google-chrome-stable

          # Get Chrome version
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
          echo "Chrome version: $CHROME_VERSION"

          # Install compatible ChromeDriver
          wget -N https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      - name: Create CI Program and publish directly
        run: |
          # Create temporary directory for CI build
          mkdir -p ci_build
          
          # Copy entire project excluding Program.cs
          cp -r MoviesMadeEasyProject ci_build/
          
          # Create modified Program.cs for CI
          cat > ci_build/MoviesMadeEasyProject/MoviesMadeEasy/Program.cs << 'EOL'
          using MoviesMadeEasy.DAL.Abstract;
          using MoviesMadeEasy.DAL.Concrete;
          using Microsoft.EntityFrameworkCore;
          using MoviesMadeEasy.Models;
          using MoviesMadeEasy.Data;
          using Microsoft.AspNetCore.Identity;
          using Microsoft.AspNetCore.Authentication;
          using Microsoft.Extensions.Logging;
          using Microsoft.Extensions.DependencyInjection;
          using Polly;
          using Polly.Extensions.Http;
          using Microsoft.AspNetCore.Session;
          using System.Text.Json;
          using System.Net;

          var builder = WebApplication.CreateBuilder(args);

          builder.Logging.ClearProviders();
          builder.Logging.AddConsole();
          builder.Logging.AddDebug();
          builder.Logging.SetMinimumLevel(LogLevel.Debug); // Increased logging level

          // For CI/CD environment, add API keys directly
          builder.Configuration["OpenAI_ApiKey"] = "sk-dummy-key-for-testing";
          builder.Configuration["TMDBApiKey"] = "dummy-key-for-testing";
          builder.Configuration["RapidApiKey"] = "dummy-rapid-api-key-for-testing";
          builder.Configuration["OpenAI_Model"] = "gpt-3.5-turbo";

          if (builder.Environment.IsDevelopment())
          {
              builder.Configuration.AddUserSecrets<Program>();
          }

          if (builder.Environment.IsDevelopment())
          {
              builder.Services.AddControllersWithViews().AddRazorRuntimeCompilation();
              builder.Services.AddRazorPages().AddRazorRuntimeCompilation();
          }
          else
          {
              builder.Services.AddControllersWithViews();
          }

          // Mock the OpenAI service implementation for tests
          builder.Services.AddTransient<IOpenAIService>(provider => {
              var mockService = new OpenAIService(
                  provider.GetRequiredService<HttpClient>(),
                  provider.GetRequiredService<IConfiguration>(),
                  provider.GetRequiredService<ILogger<OpenAIService>>()
              );
              
              // This simply overrides the real method to return fixed test data
              return new MockOpenAIService();
          });

          // Mock the MovieService implementation for tests 
          builder.Services.AddTransient<IMovieService>(provider => {
              return new MockMovieService();
          });

          builder.Services.AddScoped<ISubscriptionRepository, SubscriptionRepository>();
          builder.Services.AddScoped<IUserRepository, UserRepository>();
          builder.Services.AddScoped<ITitleRepository, TitleRepository>();
          
          Console.WriteLine("Using in-memory database for CI/CD");
          builder.Services.AddDbContext<UserDbContext>(options =>
              options.UseInMemoryDatabase("TestDb"));

          builder.Services.AddDbContext<IdentityDbContext>(options =>
              options.UseInMemoryDatabase("TestAuthDb"));

          builder.Services.AddScoped<DbContext>(sp => sp.GetRequiredService<UserDbContext>());

          builder.Services.AddDefaultIdentity<IdentityUser>(options =>
          {
              options.SignIn.RequireConfirmedAccount = false;
              options.User.RequireUniqueEmail = true;
          })
          .AddEntityFrameworkStores<IdentityDbContext>();

          builder.Services.AddRazorPages();

          builder.Services.AddDistributedMemoryCache();
          builder.Services.AddSession(options =>
          {
              options.IdleTimeout = TimeSpan.FromMinutes(30);
              options.Cookie.HttpOnly = true;
              options.Cookie.IsEssential = true;
          });

          var app = builder.Build();

          if (!app.Environment.IsDevelopment())
          {
              app.UseExceptionHandler("/Home/Error");
              app.UseHsts();
          }

          // Add our mock implementations
          public class MockOpenAIService : IOpenAIService
          {
              public async Task<List<MovieRecommendation>> GetSimilarMoviesAsync(string title)
              {
                  // Return fixed movie recommendations for tests
                  return new List<MovieRecommendation>
                  {
                      new MovieRecommendation { Title = "Similar Movie 1", Year = 2020, Reason = "Test reason 1" },
                      new MovieRecommendation { Title = "Similar Movie 2", Year = 2019, Reason = "Test reason 2" },
                      new MovieRecommendation { Title = "Similar Movie 3", Year = 2021, Reason = "Test reason 3" },
                      new MovieRecommendation { Title = "Similar Movie 4", Year = 2018, Reason = "Test reason 4" },
                      new MovieRecommendation { Title = "Similar Movie 5", Year = 2022, Reason = "Test reason 5" }
                  };
              }

              public async Task<string> GetChatCompletionAsync(string prompt)
              {
                  return "This is a mock response from ChatGPT for testing purposes.";
              }
          }

          public class MockMovieService : IMovieService
          {
              public async Task<List<MoviesMadeEasy.Models.Movie>> SearchMoviesAsync(string query)
              {
                  // Create mock search results with streaming services for tests
                  var movies = new List<MoviesMadeEasy.Models.Movie>();
                  
                  // If searching for Hunger Games, return mock data
                  if (query.ToLower().Contains("hunger"))
                  {
                      var movie = new MoviesMadeEasy.Models.Movie
                      {
                          Id = "123",
                          ImdbId = "tt1392170",
                          TmdbId = "70160",
                          Title = "The Hunger Games",
                          Overview = "This is a test overview for The Hunger Games",
                          ReleaseYear = 2012,
                          OriginalTitle = "The Hunger Games",
                          Rating = 8,
                          Runtime = 142,
                          Directors = new List<string> { "Gary Ross" },
                          Cast = new List<string> { "Jennifer Lawrence", "Josh Hutcherson" },
                          ItemType = "movie",
                          ShowType = "movie"
                      };
                      
                      // Add genres
                      movie.Genres = new List<MoviesMadeEasy.Models.Genre>
                      {
                          new MoviesMadeEasy.Models.Genre { Id = "1", Name = "Action" },
                          new MoviesMadeEasy.Models.Genre { Id = "2", Name = "Adventure" },
                          new MoviesMadeEasy.Models.Genre { Id = "3", Name = "Sci-Fi" }
                      };
                      
                      // Add posters
                      movie.ImageSet = new MoviesMadeEasy.Models.ImageSet
                      {
                          VerticalPoster = new MoviesMadeEasy.Models.VerticalPoster
                          {
                              W240 = "https://via.placeholder.com/240x360",
                              W360 = "https://via.placeholder.com/360x540",
                              W480 = "https://via.placeholder.com/480x720",
                              W600 = "https://via.placeholder.com/600x900",
                              W720 = "https://via.placeholder.com/720x1080"
                          },
                          HorizontalPoster = new MoviesMadeEasy.Models.HorizontalPoster
                          {
                              W360 = "https://via.placeholder.com/360x240",
                              W480 = "https://via.placeholder.com/480x320",
                              W720 = "https://via.placeholder.com/720x480",
                              W1080 = "https://via.placeholder.com/1080x720",
                              W1440 = "https://via.placeholder.com/1440x960"
                          }
                      };
                      
                      // Add streaming services
                      movie.StreamingOptions = new Dictionary<string, List<MoviesMadeEasy.Models.StreamingOption>>();
                      
                      var netflixOption = new MoviesMadeEasy.Models.StreamingOption
                      {
                          Service = new MoviesMadeEasy.Models.Service
                          {
                              Id = "netflix",
                              Name = "Netflix",
                              HomePage = "https://www.netflix.com/login"
                          },
                          Type = "subscription",
                          Link = "https://www.netflix.com/title/123"
                      };
                      
                      var appleOption = new MoviesMadeEasy.Models.StreamingOption
                      {
                          Service = new MoviesMadeEasy.Models.Service
                          {
                              Id = "apple",
                              Name = "Apple TV",
                              HomePage = "https://tv.apple.com/login"
                          },
                          Type = "purchase",
                          Link = "https://tv.apple.com/movie/123"
                      };
                      
                      var primeOption = new MoviesMadeEasy.Models.StreamingOption
                      {
                          Service = new MoviesMadeEasy.Models.Service
                          {
                              Id = "prime",
                              Name = "Prime Video",
                              HomePage = "https://www.primevideo.com"
                          },
                          Type = "subscription",
                          Link = "https://www.primevideo.com/detail/123"
                      };
                      
                      movie.StreamingOptions.Add("us", new List<MoviesMadeEasy.Models.StreamingOption> 
                      { 
                          netflixOption, 
                          appleOption, 
                          primeOption 
                      });
                      
                      movies.Add(movie);
                  }
                  
                  return movies;
              }
          }

          // Special seed method for testing
          async Task SeedTestDataAsync(IServiceProvider serviceProvider)
          {
              using var scope = serviceProvider.CreateScope();
              var userManager = scope.ServiceProvider.GetRequiredService<UserManager<IdentityUser>>();
              var dbContext = scope.ServiceProvider.GetRequiredService<UserDbContext>();
              
              // Add test streaming services
              var streamingServices = new List<StreamingService>
              {
                  new StreamingService { Id = 1, Name = "Netflix", Region = "US", BaseUrl = "https://www.netflix.com/login", LogoUrl = "/images/Netflix_Symbol_RGB.png" },
                  new StreamingService { Id = 2, Name = "Hulu", Region = "US", BaseUrl = "https://auth.hulu.com/web/login", LogoUrl = "/images/hulu-Green-digital.png" },
                  new StreamingService { Id = 3, Name = "Disney+", Region = "US", BaseUrl = "https://www.disneyplus.com/login", LogoUrl = "/images/disney_logo_march_2024_050fef2e.png" },
                  new StreamingService { Id = 4, Name = "Prime Video", Region = "US", BaseUrl = "https://www.primevideo.com", LogoUrl = "/images/AmazonPrimeVideo.png" },
                  new StreamingService { Id = 5, Name = "Max \"HBO Max\"", Region = "US", BaseUrl = "https://play.max.com/sign-in", LogoUrl = "/images/maxlogo.jpg" },
                  new StreamingService { Id = 6, Name = "Apple TV+", Region = "US", BaseUrl = "https://tv.apple.com/login", LogoUrl = "/images/AppleTV-iOS.png" }
              };
              
              foreach (var service in streamingServices)
              {
                  dbContext.StreamingServices.Add(service);
              }
              await dbContext.SaveChangesAsync();
              
              // Seed test users
              await SeedData.InitializeAsync(serviceProvider);
              
              // Create test titles (movies)
              var titles = new List<Title>
              {
                  new Title
                  {
                      Id = 1,
                      TitleName = "Her",
                      Year = 2013,
                      PosterUrl = "https://via.placeholder.com/150x225",
                      Genres = "Drama,Romance,Sci-Fi",
                      Rating = "8.0",
                      Overview = "In a near future, a lonely writer develops an unlikely relationship with an operating system.",
                      StreamingServices = "Netflix,Apple TV+",
                      LastUpdated = DateTime.UtcNow.AddDays(-5)
                  },
                  new Title
                  {
                      Id = 2,
                      TitleName = "Pokemon 4Ever",
                      Year = 2001,
                      PosterUrl = "https://via.placeholder.com/150x225",
                      Genres = "Animation,Adventure,Family",
                      Rating = "5.8",
                      Overview = "The Pokémon trainer Ash Ketchum and his friends travel back in time to save a legendary Pokémon from being captured.",
                      StreamingServices = "Hulu,Disney+",
                      LastUpdated = DateTime.UtcNow.AddDays(-2)
                  }
              };
              
              foreach (var title in titles)
              {
                  dbContext.Titles.Add(title);
              }
              await dbContext.SaveChangesAsync();
              
              // Create test user accounts with streaming service subscriptions
              var user1 = await userManager.FindByEmailAsync("testuser@example.com");
              var user2 = await userManager.FindByEmailAsync("testuser2@example.com");
              
              if (user1 != null)
              {
                  // Find or create user in our context
                  var appUser = dbContext.Users.FirstOrDefault(u => u.AspNetUserId == user1.Id);
                  if (appUser == null)
                  {
                      appUser = new User
                      {
                          AspNetUserId = user1.Id,
                          FirstName = "Test",
                          LastName = "User",
                          ColorMode = "Light",
                          FontSize = "Medium",
                          FontType = "Standard"
                      };
                      dbContext.Users.Add(appUser);
                      await dbContext.SaveChangesAsync();
                  }
                  
                  // Add streaming service subscriptions
                  var userServices = new List<UserStreamingService>
                  {
                      new UserStreamingService { UserId = appUser.Id, StreamingServiceId = 1 }, // Netflix
                      new UserStreamingService { UserId = appUser.Id, StreamingServiceId = 2 }, // Hulu
                      new UserStreamingService { UserId = appUser.Id, StreamingServiceId = 3 }  // Disney+
                  };
                  
                  foreach (var us in userServices)
                  {
                      dbContext.UserStreamingServices.Add(us);
                  }
                  
                  // Add recently viewed titles
                  var recentlyViewed = new List<RecentlyViewedTitle>
                  {
                      new RecentlyViewedTitle
                      {
                          UserId = appUser.Id,
                          TitleId = 1, // Her
                          ViewedAt = DateTime.UtcNow.AddMinutes(-30)
                      },
                      new RecentlyViewedTitle
                      {
                          UserId = appUser.Id,
                          TitleId = 2, // Pokemon 4Ever
                          ViewedAt = DateTime.UtcNow.AddHours(-2)
                      }
                  };
                  
                  foreach (var rv in recentlyViewed)
                  {
                      dbContext.RecentlyViewedTitles.Add(rv);
                  }
              }
              
              await dbContext.SaveChangesAsync();
              
              // Log summary of data seeded
              Console.WriteLine($"Seeded {streamingServices.Count} streaming services");
              Console.WriteLine($"Seeded {titles.Count} titles");
              
              // Verify what's in the database
              Console.WriteLine($"Streaming services in DB: {dbContext.StreamingServices.Count()}");
              Console.WriteLine($"Titles in DB: {dbContext.Titles.Count()}");
              Console.WriteLine($"Users in DB: {dbContext.Users.Count()}");
              
              // Check if testuser exists
              var testUser = dbContext.Users.FirstOrDefault(u => u.AspNetUserId == user1?.Id);
              if (testUser != null)
              {
                  Console.WriteLine($"Found testuser in DB with ID {testUser.Id}");
                  var userSubs = dbContext.UserStreamingServices.Count(us => us.UserId == testUser.Id);
                  Console.WriteLine($"User has {userSubs} subscriptions");
              }
              else
              {
                  Console.WriteLine("Could not find testuser in DB!");
              }
          }

          // THIS IS THE CRITICAL PART - Seed the test data needed for BDD tests
          try 
          {
              Console.WriteLine("Seeding test data...");
              await SeedTestDataAsync(app.Services);
              Console.WriteLine("Database seeded successfully with test data");
          }
          catch (Exception ex)
          {
              Console.WriteLine($"ERROR seeding data: {ex.Message}");
              Console.WriteLine(ex.StackTrace);
          }

          app.UseHttpsRedirection();
          app.UseStaticFiles();
          app.UseRouting();
          app.UseSession();
          app.UseAuthentication();
          app.UseAuthorization();

          app.MapControllerRoute(
              name: "default",
              pattern: "{controller=Home}/{action=Index}/{id?}");

          app.MapRazorPages();

          app.Run();
          EOL
          
          # Create CI appsettings.json
          cat > ci_build/MoviesMadeEasyProject/MoviesMadeEasy/appsettings.json << 'EOL'
          {
            "Logging": {
              "LogLevel": {
                "Default": "Debug",
                "Microsoft.AspNetCore": "Information"
              }
            },
            "AllowedHosts": "*",
            "OpenAI_ApiKey": "sk-dummy-key-for-testing",
            "TMDBApiKey": "dummy-key-for-testing",
            "RapidApiKey": "dummy-rapid-api-key-for-testing",
            "OpenAI_Model": "gpt-3.5-turbo"
          }
          EOL
          
          # Build from the CI directory
          dotnet publish ci_build/MoviesMadeEasyProject/MoviesMadeEasy/MoviesMadeEasy.csproj --configuration Release --output ./publish_output
          
          # Copy the CI config to output
          cp ci_build/MoviesMadeEasyProject/MoviesMadeEasy/appsettings.json ./publish_output/appsettings.json

      - name: Run web app with detailed logging
        run: |
          cd ./publish_output
          nohup dotnet MoviesMadeEasy.dll --urls http://localhost:5000 > app.log 2>&1 &
          
          # Wait for app to initialize with increasing timeouts
          echo "Waiting for app to start and seed database..."
          for i in {1..30}; do
            echo "Checking app status (attempt $i)..."
            if curl -s http://localhost:5000 > /dev/null; then
              echo "App is responding!"
              break
            fi
            sleep 2
          done
          
          # Additional delay to ensure database is fully seeded
          echo "Giving app extra time to finish seeding database..."
          sleep 10
          
          # Check if app is responding with correct status
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "App response code: $RESPONSE"
          
          # Display application logs
          echo "=== Application Logs ==="
          cat app.log
          echo "======================="
          
          if [[ "$RESPONSE" != "200" ]]; then
            echo "App failed to start properly. Exiting."
            exit 1
          fi

      - name: Update ChromeDriver settings in BDD test project
        run: |
          cat > MoviesMadeEasyProject/MyBddProject.Tests/chromedriver-options.json << 'EOL'
          {
            "chromeOptions": {
              "args": ["--headless", "--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage", "--window-size=1920,1080"],
              "w3c": true,
              "pageLoadStrategy": "normal",
              "timeouts": {
                "implicit": 30000,
                "pageLoad": 60000,
                "script": 30000
              }
            }
          }
          EOL

      - name: Run BDD tests (NUnit + Selenium) with additional logging
        run: |
          # Enable detailed output from tests
          export REQNROLL_TRACE=verbose
          
          # Increase timeout for tests
          export TEST_TIMEOUT=120000
          
          # Run tests with verbose output
          dotnet test MoviesMadeEasyProject/MyBddProject.Tests/MyBddProject.Tests.csproj --verbosity normal --logger "console;verbosity=detailed"

      - name: Run frontend tests (Jest)
        run: npm run test

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./publish_output

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./publish_output

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}