// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesMadeEasy.Data;

#nullable disable

namespace MoviesMadeEasy.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250220014155_UserStreamingServicesAndUpdates")]
    partial class UserStreamingServicesAndUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.StreamingService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("base_url");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("region");

                    b.HasKey("Id");

                    b.ToTable("StreamingService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            BaseUrl = "https://www.netflix.com/login",
                            LogoUrl = "/images/Netflix_Symbol_RGB.png",
                            Name = "Netflix",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            BaseUrl = "https://auth.hulu.com/web/login",
                            LogoUrl = "/images/hulu-Green-digital.png",
                            Name = "Hulu",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("9b5f8e4c-a3c6-4856-a1d2-e50e133b5f61"),
                            BaseUrl = "https://www.disneyplus.com/login",
                            LogoUrl = "/images/disney_logo_march_2024_050fef2e.png",
                            Name = "Disney+",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("8b0a7e6e-6b2a-4c85-b0e7-763c1e9f3bfb"),
                            BaseUrl = "https://www.amazon.com/ap/signin",
                            LogoUrl = "/images/AmazonPrimeVideo.png",
                            Name = "Amazon Prime Video",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("2d68f375-6e3b-46b3-b67a-d1629b6fef6b"),
                            BaseUrl = "https://play.max.com/sign-in",
                            LogoUrl = "/images/maxlogo.jpg",
                            Name = "Max (formerly HBO Max)",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("b9bdb87b-7933-4e44-9cd3-4e2bdee2eaea"),
                            BaseUrl = "https://tv.apple.com/login",
                            LogoUrl = "/images/AppleTV-iOS.png",
                            Name = "Apple TV+",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("135f363b-d38f-4c67-befb-b2f57b1c7ef5"),
                            BaseUrl = "https://www.peacocktv.com/signin",
                            LogoUrl = "/images/Peacock_'P'.png",
                            Name = "Peacock",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("217d4328-2c0a-4c90-a348-6a82c9bb5734"),
                            BaseUrl = "https://www.paramountplus.com/account/signin/",
                            LogoUrl = "/images/Paramountplus.png",
                            Name = "Paramount+",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("bc6b7342-8e3a-4943-b36e-408e882a4dbf"),
                            BaseUrl = "https://www.starz.com/login",
                            LogoUrl = "/images/Starz_Prism_Button_Option_01.png",
                            Name = "Starz",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("cb4194a3-4826-4bc7-bd1d-b2466c7915cf"),
                            BaseUrl = "https://tubitv.com/login",
                            LogoUrl = "/images/tubitlogo.png",
                            Name = "Tubi",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("5b44db3d-8f5f-49b2-99b4-3c674fc4a7b8"),
                            BaseUrl = "https://pluto.tv/en/login",
                            LogoUrl = "/images/Pluto-TV-Logo.jpg",
                            Name = "Pluto TV",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("9cf82c66-4a3b-4e82-bf37-34d6b8f5d546"),
                            BaseUrl = "https://www.britbox.com/us/account/signin",
                            LogoUrl = "/images/britboxlogo.png",
                            Name = "BritBox",
                            Region = "US"
                        },
                        new
                        {
                            Id = new Guid("7e3c946d-ffeb-4c02-abe8-5df8cd7f536f"),
                            BaseUrl = "https://www.amcplus.com/login",
                            LogoUrl = "/images/amcpluslogo.png",
                            Name = "AMC+",
                            Region = "US"
                        });
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("external_id");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("Title", (string)null);
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ColorMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RecentlyViewedShowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RecentlyViewedShowId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.UserStreamingService", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StreamingServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "StreamingServiceId");

                    b.HasIndex("StreamingServiceId");

                    b.ToTable("UserStreamingServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoviesMadeEasy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoviesMadeEasy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesMadeEasy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoviesMadeEasy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.User", b =>
                {
                    b.HasOne("MoviesMadeEasy.Models.Title", "RecentlyViewedShow")
                        .WithMany("Users")
                        .HasForeignKey("RecentlyViewedShowId");

                    b.Navigation("RecentlyViewedShow");
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.UserStreamingService", b =>
                {
                    b.HasOne("MoviesMadeEasy.Models.StreamingService", "StreamingService")
                        .WithMany("UserStreamingServices")
                        .HasForeignKey("StreamingServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesMadeEasy.Models.User", "User")
                        .WithMany("UserStreamingServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreamingService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.StreamingService", b =>
                {
                    b.Navigation("UserStreamingServices");
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.Title", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MoviesMadeEasy.Models.User", b =>
                {
                    b.Navigation("UserStreamingServices");
                });
#pragma warning restore 612, 618
        }
    }
}
